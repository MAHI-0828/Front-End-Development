{"createdAt":"2023-06-13T07:41:47.837Z","colorScheme":"blue","overview":{"content":"This course will teach you the core skills and technologies required to build modern, responsive and interactive websites. Through a combination of lectures, hands-on exercises, and real-world projects, you'll learn how to design and develop beautiful user interfaces using HTML, CSS, and JavaScript. You'll also gain an understanding of important web development concepts like accessibility, performance optimization, and version control.","title":"Overview"},"sections":{"module1":{"short":"Intro","slug":"intro","name":"Introduction to Web Development","blocks":{"9YQIwyXKej":{"content":"Congratulations on completing the Introduction to Web Development module! You should now have a solid foundation in the fundamental concepts of web development, including HTML, CSS, and JavaScript. In the next module, we'll dive deeper into front-end development and learn how to build responsive interfaces using CSS.","type":"highlight","title":"Conclusion - Introduction to Web Development","order":2},"iObraALb6i":{"order":1,"html":"<p>Welcome to the first module of our Front End Development course! In this module, we&#39;ll introduce you to the fundamental concepts of web development, including the technologies and tools used to build websites.</p>\n<h2>Overview</h2>\n<p>Web development is the process of creating websites and web applications that are accessible through the internet. At a high level, web development involves three main components: front-end development, back-end development, and database management. </p>\n<p>In this module, we&#39;ll focus on front-end development, which is the part of web development that deals with everything related to what the user sees and interacts with on a website. </p>\n<p>We&#39;ll cover the following topics:</p>\n<ul>\n<li><strong>HTML</strong>: Hypertext Markup Language (HTML) is the standard markup language used to create web pages. We&#39;ll learn how to use HTML to structure content on a web page, including headings, paragraphs, images, and links.</li>\n<li><strong>CSS</strong>: Cascading Style Sheets (CSS) is a stylesheet language used to describe the presentation of a document written in HTML. We&#39;ll learn how to use CSS to style HTML elements, such as changing the color, font, and layout of a web page.</li>\n<li><strong>JavaScript</strong>: JavaScript is a programming language used to add interactivity to websites. We&#39;ll learn how to use JavaScript to create animations, respond to user events like clicks and scrolls, and make network requests to fetch data from servers.</li>\n</ul>\n<h2>HTML</h2>\n<p>HTML is the foundation of every web page. It provides the structure for all content on a website, including text, images, videos, and links. HTML uses a set of markup tags to define the different parts of a web page, such as headings, paragraphs, lists, and tables.</p>\n<p>In this section, we&#39;ll cover the basics of HTML, including:</p>\n<ul>\n<li><strong>Document Structure</strong>: Every HTML document has a basic structure, which includes a doctype declaration, a head section, and a body section.</li>\n<li><strong>Elements and Tags</strong>: HTML elements are the building blocks of a web page, and each element is defined by an opening tag, content, and a closing tag. We&#39;ll cover the most commonly used HTML elements, including headings, paragraphs, images, links, lists, and tables.</li>\n<li><strong>Attributes</strong>: HTML attributes provide additional information about an element, such as the source of an image or the target of a link. We&#39;ll learn how to use attributes to make our web pages more accessible and functional.</li>\n</ul>\n<h2>CSS</h2>\n<p>CSS allows us to style HTML elements on a web page, giving us control over the colors, fonts, layouts, and animations. With CSS, we can create beautiful and responsive websites that look great on any device.</p>\n<p>In this section, we&#39;ll cover the basics of CSS, including:</p>\n<ul>\n<li><strong>Selectors</strong>: CSS selectors allow us to target specific HTML elements on a web page and apply styles to those elements. We&#39;ll learn how to use different types of selectors, including element selectors, class selectors, and ID selectors.</li>\n<li><strong>Properties and Values</strong>: CSS properties define the visual characteristics of an HTML element, such as the color, font-size, and margin. We&#39;ll cover the most commonly used CSS properties and values.</li>\n<li><strong>Box Model</strong>: The CSS box model is a conceptual model used to describe the layout of HTML elements on a web page. We&#39;ll learn how to use the box model to create responsive designs that adapt to different screen sizes.</li>\n</ul>\n<h2>JavaScript</h2>\n<p>JavaScript is a programming language that allows us to add interactivity to our web pages. With JavaScript, we can respond to user events like clicks and scrolls, manipulate the HTML and CSS on a page, and make network requests to fetch data from servers.</p>\n<p>In this section, we&#39;ll cover the basics of JavaScript, including:</p>\n<ul>\n<li><strong>Variables and Data Types</strong>: Variables are used to store data in JavaScript, and there are several different data types, including strings, numbers, and booleans. We&#39;ll learn how to declare and manipulate variables in JavaScript.</li>\n<li><strong>Functions</strong>: Functions are reusable blocks of code that perform a specific task. We&#39;ll learn how to define and call functions in JavaScript.</li>\n<li><strong>DOM Manipulation</strong>: The Document Object Model (DOM) is a programming interface for HTML and XML documents. We&#39;ll learn how to use JavaScript to manipulate the DOM, such as updating the text of an element or adding a new element to a web page.</li>\n</ul>","type":"html"}},"order":1},"wrapup":{"short":"Wrap-up","slug":"wrapup","blocks":{"chlcbuVSqc":{"type":"list","order":1,"items":{"con_wELKf0OQeM":{"title":"Interactive Web Applications","content":"Congratulations on completing the Interactive Web Applications module, and on finishing the Front End Development course! You should now have a solid understanding of the principles and techniques used to create modern, responsive, and interactive websites using HTML, CSS, and JavaScript. Good luck with your future web development projects!","order":3},"con_fiLrbTCyrF":{"content":"Congratulations on completing the Introduction to Web Development module! You should now have a solid foundation in the fundamental concepts of web development, including HTML, CSS, and JavaScript. In the next module, we'll dive deeper into front-end development and learn how to build responsive interfaces using CSS.","order":1,"title":"Introduction to Web Development"},"con_SS2vwtjTm0":{"title":"Building Responsive Interfaces","order":2,"content":"Congratulations on completing the Building Responsive Interfaces module! You should now have a solid understanding of the principles and techniques used to create responsive interfaces that work on any device. In the next module, we'll dive into the world of interactive web applications and learn how to use JavaScript to create dynamic and engaging user experiences."}}}},"order":5,"name":"Wrap-up","headline":"Let's review what we have just seen so far"},"module2":{"short":"Responsive","name":"Building Responsive Interfaces","slug":"responsive","order":2,"blocks":{"0euimqTLZE":{"title":"Conclusion - Building Responsive Interfaces","type":"highlight","order":2,"content":"Congratulations on completing the Building Responsive Interfaces module! You should now have a solid understanding of the principles and techniques used to create responsive interfaces that work on any device. In the next module, we'll dive into the world of interactive web applications and learn how to use JavaScript to create dynamic and engaging user experiences."},"ja6DLxkces":{"html":"<p>Welcome to the second module of our Front End Development course! In this module, we&#39;ll cover the principles and techniques used to create responsive interfaces that adapt to different screen sizes.</p>\n<h2>Overview</h2>\n<p>In today&#39;s world where users access websites on a variety of devices, it&#39;s essential that websites are designed to be responsive. A responsive website is one that can adapt its layout and content to fit the screen size of the device it&#39;s being viewed on. This ensures that users have a consistent and seamless experience no matter how they&#39;re accessing the website.</p>\n<p>In this module, we&#39;ll cover the following topics:</p>\n<ul>\n<li><strong>CSS Layouts</strong>: We&#39;ll learn how to use CSS to create flexible and responsive layouts that work on any screen size.</li>\n<li><strong>Responsive Design Techniques</strong>: We&#39;ll explore a variety of techniques for making websites responsive, including media queries, fluid grids, and flexible images.</li>\n<li><strong>Accessibility</strong>: We&#39;ll discuss the importance of designing websites with accessibility in mind, and how to make sure that our responsive designs are accessible to all users.</li>\n</ul>\n<h2>CSS Layouts</h2>\n<p>CSS provides a powerful set of tools for creating layouts on a web page. With CSS, we can control the positioning, sizing, and spacing of HTML elements to create a visually appealing and easy-to-navigate interface.</p>\n<p>In this section, we&#39;ll cover the basics of CSS layouts, including:</p>\n<ul>\n<li><strong>Box Sizing</strong>: The box-sizing property allows us to specify how an element&#39;s width and height should be calculated, including padding and border widths.</li>\n<li><strong>Positioning</strong>: There are several types of positioning available in CSS, including static, relative, absolute, and fixed. We&#39;ll learn how to use each type of positioning to create a variety of layouts.</li>\n<li><strong>Flexbox</strong>: Flexbox is a new CSS layout mode that makes it easier to create flexible and responsive layouts. We&#39;ll learn how to use the flexbox properties to create complex layouts with ease.</li>\n</ul>\n<h2>Responsive Design Techniques</h2>\n<p>There are many techniques for making websites responsive, and in this section, we&#39;ll explore some of the most commonly used ones.</p>\n<ul>\n<li><strong>Media Queries</strong>: Media queries allow us to apply different CSS styles depending on the size of the device screen. We&#39;ll learn how to write media queries that target specific screen sizes, as well as how to use breakpoints to create a flexible layout.</li>\n<li><strong>Fluid Grids</strong>: Fluid grids use relative units like percentages to size elements based on the width of the container, rather than using fixed pixel values. This allows the layout to adapt to different screen sizes without breaking.</li>\n<li><strong>Flexible Images</strong>: Images can be a challenge when it comes to responsive design, but there are several techniques we can use to make sure they look great on any device. We&#39;ll cover techniques like setting a max-width on images or using the new <code>srcset</code> attribute to provide multiple versions of an image.</li>\n</ul>\n<h2>Accessibility</h2>\n<p>When designing responsive interfaces, it&#39;s important to keep accessibility in mind. Accessibility means designing websites so that they&#39;re usable by everyone, including people with disabilities.</p>\n<p>In this section, we&#39;ll cover the basics of web accessibility, including:</p>\n<ul>\n<li><strong>Semantic HTML</strong>: Using semantic HTML tags like <code>&lt;header&gt;</code>, <code>&lt;main&gt;</code>, and <code>&lt;footer&gt;</code> can help make our content more accessible to screen readers and other assistive technologies.</li>\n<li><strong>Color Contrast</strong>: Ensuring that there&#39;s enough contrast between text and background colors is essential for users with visual impairments.</li>\n<li><strong>Keyboard Navigation</strong>: Users who can&#39;t use a mouse need to be able to navigate a website using only the keyboard. We&#39;ll learn how to ensure that our websites are fully navigable using just the keyboard.</li>\n</ul>","type":"html","order":1}}},"module3":{"name":"Interactive Web Applications","blocks":{"P6IP4O5wSM":{"type":"html","html":"<p>Welcome to the third and final module of our Front End Development course! In this module, we&#39;ll dive into the world of interactive web applications and learn how to use JavaScript to create dynamic and engaging user experiences.</p>\n<h2>Overview</h2>\n<p>Interactive web applications are the backbone of modern web development. They allow users to interact with a website in real-time, providing feedback and information that can be used to create rich and dynamic user experiences.</p>\n<p>In this module, we&#39;ll cover the following topics:</p>\n<ul>\n<li><strong>Event Handling</strong>: We&#39;ll learn how to use JavaScript to handle user events like clicks and scrolls, and respond to them in real-time.</li>\n<li><strong>DOM Manipulation</strong>: We&#39;ll explore more advanced techniques for manipulating the Document Object Model (DOM) using JavaScript, such as adding and removing elements on the fly.</li>\n<li><strong>Asynchronous Programming</strong>: We&#39;ll learn how to use asynchronous programming techniques to make network requests to servers and update the content of a web page without reloading it.</li>\n</ul>\n<h2>Event Handling</h2>\n<p>Event handling is a core feature of interactive web applications. With event handling, we can respond to user events like clicks and scrolls, and use that information to update the content of a web page in real-time.</p>\n<p>In this section, we&#39;ll cover the basics of event handling in JavaScript, including:</p>\n<ul>\n<li><strong>Event Listeners</strong>: Event listeners are functions that get called in response to a specific user event, such as a click or scroll. We&#39;ll learn how to add event listeners to HTML elements using JavaScript.</li>\n<li><strong>Event Objects</strong>: When an event is triggered, an event object is created that contains information about the event, such as its type and target element. We&#39;ll learn how to access and use event objects in our event listener functions.</li>\n<li><strong>Event Propagation</strong>: When an event is triggered on an element, it can propagate up or down the DOM tree. We&#39;ll learn about event propagation and how to stop it from bubbling up or down the tree.</li>\n</ul>\n<h2>DOM Manipulation</h2>\n<p>DOM manipulation is the process of using JavaScript to update the content and structure of a web page in real-time. With DOM manipulation, we can create fluid and dynamic user experiences that respond to user actions in real-time.</p>\n<p>In this section, we&#39;ll cover more advanced techniques for manipulating the DOM using JavaScript, including:</p>\n<ul>\n<li><strong>Adding and Removing Elements</strong>: We can use JavaScript to add or remove elements from a web page on the fly. This allows us to create dynamic and interactive interfaces that respond to user input.</li>\n<li><strong>Modifying Element Styles</strong>: We can also use JavaScript to modify the CSS styles of elements on a web page. This allows us to create animations and other visual effects that enhance the user experience.</li>\n<li><strong>Working with Forms</strong>: Forms are a common feature of web applications, and we&#39;ll learn how to use JavaScript to validate form inputs and submit them to a server using AJAX.</li>\n</ul>\n<h2>Asynchronous Programming</h2>\n<p>Asynchronous programming is a key technique used in modern web development. With asynchronous programming, we can make network requests to servers and update the content of a web page without reloading it. This creates a seamless and engaging user experience.</p>\n<p>In this section, we&#39;ll cover the basics of asynchronous programming in JavaScript, including:</p>\n<ul>\n<li><strong>Callbacks</strong>: Callbacks are functions that get called in response to an event, such as a network request completing. We&#39;ll learn how to use callbacks to handle asynchronous events in JavaScript.</li>\n<li><strong>Promises</strong>: Promises are a newer feature in JavaScript that make it easier to work with asynchronous code. We&#39;ll learn how to use promises to handle network requests and other asynchronous events.</li>\n<li><strong>AJAX</strong>: AJAX stands for Asynchronous JavaScript and XML, and it&#39;s a technique for making network requests to servers without reloading the entire page. We&#39;ll learn how to use AJAX to retrieve data from servers and update the content of a web page in real-time.</li>\n</ul>","order":1},"X8tWhtHkWK":{"title":"Conclusion - Interactive Web Applications","type":"highlight","order":2,"content":"Congratulations on completing the Interactive Web Applications module, and on finishing the Front End Development course! You should now have a solid understanding of the principles and techniques used to create modern, responsive, and interactive websites using HTML, CSS, and JavaScript. Good luck with your future web development projects!"}},"slug":"interactive","order":3,"short":"Interactive"},"quiz":{"name":"Quiz","headline":"Check your knowledge answering some questions","blocks":{"Pc0szRlEEr":{"type":"quiz","order":1,"questions":{}}},"slug":"quiz","order":6,"short":"Quiz"}},"folderId":null,"category":"Web Development","keywords":{"keyword4":"CSS","keyword1":"front-end","keyword2":"web development","keyword3":"HTML","keyword5":"JavaScript"},"headline":"Learn the fundamentals of front-end web development","conclusion":{"title":"Conclusion","content":"Congratulations on completing this course! You have taken an important step in unlocking your full potential. Completing this course is not just about acquiring knowledge; it's about putting that knowledge into practice and making a positive impact on the world around you."},"name":"Front End Development","id":"06dH2N4fGrwLeL3kIzbd","version":4,"viewCount":0,"languageId":"en-US"}